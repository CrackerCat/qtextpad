name: Win64-CI
on:
  push:
    branches: [master, qt6]
  pull_request:

jobs:
  build:
    runs-on: windows-2019
    name: "Windows-x64-Qt${{ matrix.cfg.qt_version }}"
    strategy:
      matrix:
        cfg:
          - kf5_version: "5.106"
            kf5_fullver: "5.106.0"
            qt_version: "5.15.2"
            qt_tools: "tools_openssl_x64"
            cmake_generator: "Visual Studio 16 2019"
            kf5_cmake_args: ""
            build_installer: "$false"
            deploy_openssl: "$true"
          - kf5_version: "5.106"
            kf5_fullver: "5.106.0"
            qt_version: "6.5.1"
            qt_tools: ""
            cmake_generator: "Visual Studio 16 2019"
            kf5_cmake_args: "-DBUILD_WITH_QT6=ON"
            build_installer: "$true"
            deploy_openssl: "$false"

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Install Qt
        uses: jurplel/install-qt-action@v3
        with:
          arch: win64_msvc2019_64
          version: ${{ matrix.cfg.qt_version }}
          tools: ${{ matrix.cfg.qt_tools }}
      - name: Build Qt Libs
        run: |
          mkdir build_deps
          cd build_deps
          curl -LO https://download.kde.org/stable/frameworks/${{ matrix.cfg.kf5_version }}/extra-cmake-modules-${{ matrix.cfg.kf5_fullver }}.zip
          curl -LO https://download.kde.org/stable/frameworks/${{ matrix.cfg.kf5_version }}/syntax-highlighting-${{ matrix.cfg.kf5_fullver }}.zip
          cmake -E tar xf extra-cmake-modules-${{ matrix.cfg.kf5_fullver }}.zip
          cd extra-cmake-modules-${{ matrix.cfg.kf5_fullver }}
          mkdir build
          cd build
          cmake -G "${{ matrix.cfg.cmake_generator }}" -A x64 `
              "-DCMAKE_PREFIX_PATH=${Env:RUNNER_WORKSPACE}/Qt/${{ matrix.cfg.qt_version }}/msvc2019_64" `
              "-DCMAKE_INSTALL_PREFIX=${Env:RUNNER_WORKSPACE}/Qt/${{ matrix.cfg.qt_version }}/msvc2019_64" `
              -DCMAKE_BUILD_TYPE=Release ${{ matrix.cfg.kf5_cmake_args }} ..
          cmake --build . --config Release --target install
          cd ..\..
          cmake -E tar xf syntax-highlighting-${{ matrix.cfg.kf5_fullver }}.zip
          cd syntax-highlighting-${{ matrix.cfg.kf5_fullver }}
          mkdir build && cd build
          cmake -G "${{ matrix.cfg.cmake_generator }}" -A x64 `
              "-DCMAKE_PREFIX_PATH=${Env:RUNNER_WORKSPACE}/Qt/${{ matrix.cfg.qt_version }}/msvc2019_64" `
              "-DCMAKE_INSTALL_PREFIX=${Env:RUNNER_WORKSPACE}/Qt/${{ matrix.cfg.qt_version }}/msvc2019_64" `
              -DCMAKE_BUILD_TYPE=Release ${{ matrix.cfg.kf5_cmake_args }} ..
          cmake --build . --config Release
          cmake --build . --config Release --target install
      - name: Build qtextpad
        run: |
          mkdir build
          cd build
          cmake -G "${{ matrix.cfg.cmake_generator }}" -A x64 `
            "-DCMAKE_PREFIX_PATH=${Env:RUNNER_WORKSPACE}/Qt/${{ matrix.cfg.qt_version }}/msvc2019_64" `
            "-DCMAKE_INSTALL_PREFIX=${Env:GITHUB_WORKSPACE}/dist/qtextpad-win64" `
            -DCMAKE_BUILD_TYPE=Release ..
          cmake --build . --config Release
          cmake --build . --config Release --target install
      - name: Package qtextpad
        run: |
          $buildver = ((git describe --dirty) | Out-String).Trim()
          $buildver += "-qt" + "${{ matrix.cfg.qt_version }}"[0]
          $Env:VCINSTALLDIR = "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC"
          cd "${Env:GITHUB_WORKSPACE}\dist"
          windeployqt qtextpad-win64\qtextpad.exe --release --no-opengl-sw
          cmake -E copy "${Env:GITHUB_WORKSPACE}\COPYING" `
              "${Env:RUNNER_WORKSPACE}\Qt\${{ matrix.cfg.qt_version }}\msvc2019_64\bin\KF5SyntaxHighlighting.dll" `
              qtextpad-win64
          cmake -E copy_directory "${Env:RUNNER_WORKSPACE}\Qt\${{ matrix.cfg.qt_version }}\msvc2019_64\bin\data" `
              qtextpad-win64\data
          windeployqt qtextpad-win64\KF5SyntaxHighlighting.dll --release --no-opengl-sw

          # OpenSSL libs are required for the online repository update in Qt5,
          # but Qt6 can use the Windows SChannel backend instead
          if (${{ matrix.cfg.deploy_openssl }}) {
              cmake -E copy `
                  "${Env:RUNNER_WORKSPACE}\Qt\Tools\OpenSSL\Win_x64\bin\libcrypto-1_1-x64.dll" `
                  "${Env:RUNNER_WORKSPACE}\Qt\Tools\OpenSSL\Win_x64\bin\libssl-1_1-x64.dll" `
                  qtextpad-win64
          } else {
              cmake -E rm qtextpad-win64\tls\qopensslbackend.dll
          }

          cmake -E tar cf "..\qtextpad-win64-${buildver}.zip" --format=zip qtextpad-win64
          cd ..\win32
          cmake -E tar xf "..\qtextpad-win64-${buildver}.zip"
          if (${{ matrix.cfg.build_installer }}) {
              iscc setup.iss
              cmake -E rename qtextpad-win64.exe "..\qtextpad-win64-${buildver}.exe"
          }
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: QTextPad-win64
          path: qtextpad-win64-*.*
